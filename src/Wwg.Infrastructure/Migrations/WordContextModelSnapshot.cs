// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wwg.Infrastructure.Data;

namespace Wwg.Infrastructure.Migrations
{
    [DbContext(typeof(WordContext))]
    partial class WordContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Wwg.Core.Entities.Antonym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefinitionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Word")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Antonym");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Definition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Define")
                        .HasColumnType("TEXT");

                    b.Property<string>("Example")
                        .HasColumnType("TEXT");

                    b.Property<int>("Language")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MeaningId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeaningId");

                    b.ToTable("Definition");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Meaning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("PartOfSpeech")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("WordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("Meaning");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Synonym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DefinitionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Word")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId");

                    b.ToTable("Synonym");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Word", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Antonym", b =>
                {
                    b.HasOne("Wwg.Core.Entities.Definition", null)
                        .WithMany("Antonyms")
                        .HasForeignKey("DefinitionId");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Definition", b =>
                {
                    b.HasOne("Wwg.Core.Entities.Meaning", null)
                        .WithMany("Definitions")
                        .HasForeignKey("MeaningId");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Meaning", b =>
                {
                    b.HasOne("Wwg.Core.Entities.Word", null)
                        .WithMany("Meanings")
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Synonym", b =>
                {
                    b.HasOne("Wwg.Core.Entities.Definition", null)
                        .WithMany("Synonyms")
                        .HasForeignKey("DefinitionId");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Definition", b =>
                {
                    b.Navigation("Antonyms");

                    b.Navigation("Synonyms");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Meaning", b =>
                {
                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("Wwg.Core.Entities.Word", b =>
                {
                    b.Navigation("Meanings");
                });
#pragma warning restore 612, 618
        }
    }
}
